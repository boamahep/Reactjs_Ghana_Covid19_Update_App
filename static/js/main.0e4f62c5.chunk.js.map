{"version":3,"sources":["image/logo.PNG","components/HeaderComponent.js","components/BannerComponent.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeaderComponent","className","src","logo","alt","width","height","Component","BannerComponent","state","gh","url","axios","get","then","response","data","setState","console","log","this","active","recovered","class","deaths","cases","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,kC,qNCc5BC,E,uKATP,OACI,yBAAKC,UAAU,UACvB,yBAAKA,UAAU,MAAMC,IAAKC,IAAMC,IAAI,OAAOC,MAAM,QAAQC,OAAO,UAChE,uBAAGL,UAAU,UAAb,yC,GAL0BM,a,iBCuCfC,E,4MArCXC,MAAQ,CACJC,GAAI,I,kEAEe,IAAD,OACZC,EAAG,UAPD,yCAOC,OACTC,IAAMC,IAAIF,GAAKG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,QACxCF,MAAK,SAACE,GACL,EAAKC,SAAS,CAACP,GAAIM,IACnBE,QAAQC,IAAI,EAAKV,MAAMC,S,+BAIzB,OACI,yBAAKT,UAAU,UACf,yBAAKA,UAAU,OACf,yBAAKA,UAAU,OACX,4CACA,4BAAKmB,KAAKX,MAAMC,GAAGW,SAEvB,yBAAKpB,UAAU,OACP,8CACA,4BAAKmB,KAAKX,MAAMC,GAAGY,YAEvB,yBAAKC,MAAM,OACH,2CACA,4BAAKH,KAAKX,MAAMC,GAAGc,SAEvB,yBAAKD,MAAM,OACf,2CACA,4BAAKH,KAAKX,MAAMC,GAAGe,c,GA9BLlB,aCafmB,MATf,WACE,OACF,yBAAKzB,UAAU,eACf,kBAAC,EAAD,MACA,kBAAC,EAAD,QCAoB0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.0e4f62c5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.6c5827cc.PNG\";","import React, {Component} from 'react';\r\nimport logo from '../image/logo.PNG';\r\n\r\nclass HeaderComponent extends Component {\r\n    render() {\r\n        return (\r\n            <div className='header'>\r\n    <img className='img' src={logo} alt=\"logo\" width=\"100px\" height=\"100px\" />\r\n    <p className='navbar'>GHANA COVID-19 UPDATE INFOMATION</p>\r\n    </div>\r\n     );\r\n    }\r\n}\r\n\r\nexport default HeaderComponent;","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\nconst API_URL = 'https://corona.lmao.ninja/v2/countries';\r\n\r\nclass BannerComponent extends Component {\r\n    state = {\r\n        gh: []\r\n      }\r\n      componentDidMount() {\r\n        const url = `${API_URL}/gh`;\r\n        axios.get(url).then(response => response.data)\r\n        .then((data) => {\r\n          this.setState({gh: data})\r\n          console.log(this.state.gh)\r\n         })\r\n      }\r\n    render() {\r\n        return (\r\n            <div className=\"banner\">\r\n            <div className=\"row\">\r\n            <div className=\"col\">\r\n                <h3>Active Cases</h3>\r\n                <h4>{this.state.gh.active}</h4>\r\n            </div>\r\n            <div className=\"col\">\r\n                    <h3>Recovery Cases</h3>\r\n                    <h4>{this.state.gh.recovered}</h4>\r\n                </div>\r\n                <div class=\"col\">\r\n                        <h3>Death Cases</h3>\r\n                        <h4>{this.state.gh.deaths}</h4>\r\n                    </div>\r\n                    <div class=\"col\">\r\n                <h3>Total Cases</h3>\r\n                <h4>{this.state.gh.cases}</h4>\r\n            </div>\r\n            </div>\r\n                </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default BannerComponent;","import React from 'react';\nimport './App.css';\n\nimport HeaderComponent from './components/HeaderComponent';\nimport BannerComponent from './components/BannerComponent';\n\n\n\nfunction App() {\n  return (\n<div className=\"mycontainer\">\n<HeaderComponent />\n<BannerComponent />\n</div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}